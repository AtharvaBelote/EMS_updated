export interface User {
  uid: string;
  userId: string; // ID for login (Employee ID, Manager ID, or Admin ID)
  email: string;
  role: 'admin' | 'manager' | 'employee';
  employeeId?: string;
  companyId?: string; // Links user to their company (admin's uid)
  displayName?: string; // Made optional to handle existing users
  status?: 'active' | 'inactive' | 'suspended';
  createdAt: Date;
  lastLoginAt: Date;
  updatedAt?: Date;
}

export interface Manager {
  id: string;
  managerId: string; // Manager ID for identification
  fullName: string;
  email: string;
  companyId: string; // Links manager to their company (admin's uid)
  createdAt: Date;
  updatedAt?: Date;
  // Dynamic fields - can be added by users
  [key: string]: any;
}

export interface Company {
  companyName: string;
  email: string; // admin email
  userId: string; // auto generated adminID to login
  managers: string[]; // under this admin (array of manager IDs)
  address: {
    city: string;
    street: string;
    pinCode: string;
    state: string;
    buildingBlock?: string;
  };
  adminName: string;
  adminMobile: string;
  uid: string; // auto generated by firebase
  createdAt: Date;
  role: 'admin';
  industryType: string;
}

export interface Employee {
  id: string;
  employeeId: string;
  fullName: string;
  email: string;
  mobile: number;
  companyId?: string; // Added to link employee to company
  assignedManagers?: string[]; // Array of manager IDs who manage this employee
  
  // Employee Information
  esicNo?: string;
  uan?: string;
  
  salary: {
    // Basic Components
    basic: number;
    da: number; // Dearness Allowance
    hra?: number; // Calculated: ROUND((Basic + D.A.) * 5%, 0)
    grossRatePM?: number; // Calculated: Basic + D.A. + HRA
    
    // Overtime
    otRatePerHour?: number; // Calculated: (Gross Earning รท Paid Days) รท 8
    singleOTHours?: number;
    doubleOTHours?: number;
    otAmount?: number; // Calculated
    
    // Adjustments
    difference?: number; // Manual adjustment/round-off
    
    // Totals
    totalGrossEarning?: number; // Calculated
    
    // Deductions
    professionalTax?: number; // Slab based
    esicEmployee?: number; // 0.75% of Total Gross
    pfBase?: number; // Calculated
    pfEmployee?: number; // 12% of PF Base
    totalDeduction?: number; // Calculated
    
    // Net Salary
    netSalary?: number; // Total Gross - Total Deduction
    
    // Employer Contributions
    esicEmployer?: number; // 3.25% of Total Gross
    pfEmployer?: number; // 13% of PF Base
    mlwfEmployer?: number; // Employee MLWF ร 3
    
    // CTC
    ctcPerMonth?: number; // Total Gross + Employer contributions
    
    // Working Days
    totalDays?: number;
    paidDays?: number;
    
    // Skill-based salary
    isSkillBased?: boolean;
    skillCategory?: string; // e.g., 'skilled', 'semi-skilled', 'unskilled'
    skillAmount?: number; // Fixed amount for skill-based calculation
    
    // Custom components
    customAllowances?: { label: string; amount: number }[];
    customBonuses?: { label: string; amount: number }[];
    customDeductions?: { label: string; amount: number }[];
    
    // Advance
    advance?: number;
    
    // Configurable calculation parameters
    hraPercentage?: number; // Default 5%
    esicEmployeePercentage?: number; // Default 0.75%
    esicEmployerPercentage?: number; // Default 3.25%
    pfEmployeePercentage?: number; // Default 12%
    pfEmployerPercentage?: number; // Default 13%
    
    // Legacy fields for backward compatibility
    base?: string | number;
    ta?: string | number;
    bonuses?: Record<string, any>;
    deductions?: Record<string, any>;
    taxRegime?: 'old' | 'new';
  };
  // Dynamic fields - can be added by users
  [key: string]: any;
}

export interface Attendance {
  id: string;
  employeeId: string;
  date: Date;
  status: 'present' | 'absent' | 'late' | 'half-day';
  checkIn?: Date;
  checkOut?: Date;
  notes?: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface SalaryStructure {
  id: string;
  name: string;
  baseSalary: number;
  hra: number;
  ta: number;
  da: number;
  bonuses: {
    performance?: number;
    attendance?: number;
    special?: number;
    [key: string]: number | undefined;
  };
  deductions: {
    pf?: number;
    tax?: number;
    insurance?: number;
    [key: string]: number | undefined;
  };
  taxRegime: 'old' | 'new';
  createdAt: Date;
  updatedAt: Date;
}

export interface Payroll {
  id: string;
  employeeId: string;
  month: number;
  year: number;
  baseSalary: number;
  hra: number;
  ta: number;
  da: number;
  totalBonus: number;
  totalDeduction: number;
  grossSalary: number;
  netSalary: number;
  taxAmount: number;
  status: 'pending' | 'approved' | 'paid';
  processedAt: Date;
  paidAt?: Date;
}

export interface SalarySlip {
  id: string;
  employeeId: string;
  payrollId: string;
  month: number;
  year: number;
  pdfUrl?: string;
  generatedAt: Date;
}

export interface AuditLog {
  id: string;
  action: string;
  userId: string;
  targetType: 'employee' | 'attendance' | 'payroll' | 'salary' | 'bulk' | 'system';
  targetId: string;
  changes?: Record<string, any>;
  timestamp: Date;
  ipAddress?: string;
}

export interface BulkOperation {
  id: string;
  type: 'import' | 'export' | 'update' | 'delete';
  status: 'pending' | 'processing' | 'completed' | 'failed';
  totalRecords: number;
  processedRecords: number;
  failedRecords: number;
  fileUrl?: string;
  errors?: string[];
  startedAt: Date;
  completedAt?: Date;
  createdBy: string;
}

export interface CustomField {
  id: string;
  name: string;
  type: 'text' | 'number' | 'boolean' | 'date' | 'select';
  required: boolean;
  options?: string[]; // For select type
  defaultValue?: any;
  order: number;
  createdAt: Date;
}

export interface SkillCategory {
  id: string;
  name: string;
  amount: number;
  description?: string;
}

export interface SalaryConfiguration {
  id: string;
  companyId: string;
  
  // Percentage configurations
  hraPercentage: number; // Default 5%
  esicEmployeePercentage: number; // Default 0.75%
  esicEmployerPercentage: number; // Default 3.25%
  pfEmployeePercentage: number; // Default 12%
  pfEmployerPercentage: number; // Default 13%
  
  // Professional tax slabs
  professionalTaxSlabs: {
    minAmount: number;
    maxAmount: number;
    taxAmount: number;
  }[];
  
  // Skill categories
  skillCategories: SkillCategory[];
  
  // Other configurations
  workingHoursPerDay: number; // Default 8
  workingDaysPerMonth: number; // Default 30
  
  createdAt: Date;
  updatedAt: Date;
}

export interface TableColumn {
  id: string;
  field: string;
  headerName: string;
  width?: number;
  sortable?: boolean;
  filterable?: boolean;
  visible?: boolean;
  order: number;
  isAutoDetected?: boolean;
  isCustom?: boolean;
}

// Re-export types from other modules
export * from './leave';
export * from './notification';
export * from './document';
export * from './performance'; 